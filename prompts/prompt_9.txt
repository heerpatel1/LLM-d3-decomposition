chart = {
const svg = d3 . create ( "svg" )
. attr ( "viewBox" , [ 0 , 0 , width , height ] ) ;

svg . append ( "g" )
. selectAll ( "g" )
. data ( series )
. join ( "g" )
. attr ( "fill" , d => color ( d . key ) )
. selectAll ( "rect" )
. data ( d => d )
. join ( "rect" )
. attr ( "x" , d => x ( d [ 0 ] ) )
. attr ( "y" , ( d , i ) => y ( d . data . name ) )
. attr ( "width" , d => x ( d [ 1 ] ) - x ( d [ 0 ] ) )
. attr ( "height" , y . bandwidth ( ) )
. append ( "title" )
. text ( d => `${ d . data . name } ${ d . key }
${ formatValue ( d . data [ d . key ] ) }` ) ;

svg . append ( "g" )
. call ( xAxis ) ;

svg . append ( "g" )
. call ( yAxis ) ;

return svg . node ( ) ;
}

 data = d3 . csvParse ( await FileAttachment ( "us-population-state-age@1.csv" ) . text ( ) , ( d , i , columns ) => ( d3 . autoType ( d ) , d . total = d3 . sum ( columns , c => d [ c ] ) , d ) ) . sort ( ( a , b ) => b . total - a . total )

 series = d3 . stack ( )
. keys ( data . columns . slice ( 1 ) )
( data )
. map ( d => ( d . forEach ( v => v . key = d . key ) , d ) )

 x = d3 . scaleLinear ( )
. domain ( [ 0 , d3 . max ( series , d => d3 . max ( d , d => d [ 1 ] ) ) ] )
. range ( [ margin . left , width - margin . right ] )

 y = d3 . scaleBand ( )
. domain ( data . map ( d => d . name ) )
. range ( [ margin . top , height - margin . bottom ] )
. padding ( 0.08 )

 color = d3 . scaleOrdinal ( )
. domain ( series . map ( d => d . key ) )
. range ( d3 . schemeSpectral [ series . length ] )
. unknown ( "#ccc" )

 xAxis = g => g
. attr ( "transform" , `translate(0,${ margin . top })` )
. call ( d3 . axisTop ( x ) . ticks ( width / 100 , "s" ) )
. call ( g => g . selectAll ( ".domain" ) . remove ( ) )

 yAxis = g => g
. attr ( "transform" , `translate(${ margin . left },0)` )
. call ( d3 . axisLeft ( y ) . tickSizeOuter ( 0 ) )
. call ( g => g . selectAll ( ".domain" ) . remove ( ) )

 formatValue = x => isNaN ( x ) ? "N/A" : x . toLocaleString ( "en" )

 height = data . length * 25 + margin . top + margin . bottom

 margin = ( { top : 30 , right : 10 , bottom : 0 , left : 100 } )

 d3 = require ( "d3@6" )

 import { legend } from "@d3/color-legend"

 ////////////////////////////////////////////////////////////////////////////////////////////////////////
 Result:
 chart = {
    // Label: createSvgComponent()
    const svg = d3.create("svg")
        .attr("viewBox", [0, 0, width, height]);

    svg.append("g")
        .selectAll("g")
        .data(series)
        .join("g")
        .attr("fill", d => color(d.key))
        .selectAll("rect")
        .data(d => d)
        .join("rect")
        .attr("x", d => x(d[0]))
        .attr("y", (d, i) => y(d.data.name))
        .attr("width", d => x(d[1]) - x(d[0]))
        .attr("height", y.bandwidth())
        .append("title")
        .text(d => `${d.data.name} ${d.key}\n${formatValue(d.data[d.key])}`);

    svg.append("g")
        .call(xAxis);

    svg.append("g")
        .call(yAxis);

    return svg.node();
}

// Label: dataComponent()
data = d3.csvParse(await FileAttachment("us-population-state-age@1.csv").text(), (d, i, columns) => (d3.autoType(d), d.total = d3.sum(columns, c => d[c]), d)).sort((a, b) => b.total - a.total)

// Label: scaleComponent()
series = d3.stack()
    .keys(data.columns.slice(1))
    (data)
    .map(d => (d.forEach(v => v.key = d.key), d))

// Label: scaleComponent()
x = d3.scaleLinear()
    .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
    .range([margin.left, width - margin.right])

// Label: scaleComponent()
y = d3.scaleBand()
    .domain(data.map(d => d.name))
    .range([margin.top, height - margin.bottom])
    .padding(0.08)

// Label: scaleComponent()
color = d3.scaleOrdinal()
    .domain(series.map(d => d.key))
    .range(d3.schemeSpectral[series.length])
    .unknown("#ccc")

// Label: svgAppend()
xAxis = g => g
    .attr("transform", `translate(0,${margin.top})`)
    .call(d3.axisTop(x).ticks(width / 100, "s"))
    .call(g => g.selectAll(".domain").remove())

// Label: svgAppend()
yAxis = g => g
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).tickSizeOuter(0))
    .call(g => g.selectAll(".domain").remove())

// Label: scaleComponent()
formatValue = x => isNaN(x) ? "N/A" : x.toLocaleString("en")

// Label: setMargin()
height = data.length * 25 + margin.top + margin.bottom

// Label: setMargin()
margin = ({top: 30, right: 10, bottom: 0, left: 100})

// Label: setD3Version()
d3 = require("d3@6")

// Label: importComponent()
import { legend } from "@d3/color-legend"

