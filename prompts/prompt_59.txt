Can you label this program for me?:

html`<style>

svg {
  font: 10px sans-serif;
}

.background path {
  fill: none;
  stroke: #ddd;
  shape-rendering: crispEdges;
}

.foreground path {
  fill: none;
  stroke: steelblue;
}

.brush .extent {
  fill-opacity: .3;
  stroke: #fff;
  shape-rendering: crispEdges;
}

.axis line,
.axis path {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.axis text {
    fill:black;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}
pre {
  width: 100%;
  height: 300px;
  margin: 6px 12px;
  tab-size: 40;
  font-size: 10px;
  overflow: auto;
}
</style>`

parallel_coordinates = {
    var margin = {top: 30, right: 10, bottom: 10, left: 10};
    var width = 960 - margin.left - margin.right;
    var height = 400 - margin.top - margin.bottom;

    var x = d3.scalePoint().range([0, width]).padding(1),
        y = {};

    var line = d3.line(),
        axis = d3.axisLeft(),
        background,
        foreground;

    var dimensions = null;

    const svg = d3.select(DOM.svg(width + margin.left + margin.right, height+margin.top + margin.bottom));

    const svg_adjusted = svg.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var out = d3.select(output)
    out.text(d3.tsvFormat(sample_data.slice(0,24)));

    // Extract the list of dimensions and create a scale for each.
    x.domain(dimensions = d3.keys(sample_data[0]).filter(function(d) {
      return d != "name" && (y[d] = d3.scaleLinear()
          .domain(d3.extent(sample_data, function(p) { return +p[d]; }))
          .range([height, 0]));
    }));

    // Add grey background lines for context.
    background = svg_adjusted.append("g")
        .attr("class", "background")
      .selectAll("path")
        .data(sample_data)
      .enter().append("path")
        .attr("d", path);

    // Add blue foreground lines for focus.
    foreground = svg_adjusted.append("g")
        .attr("class", "foreground")
      .selectAll("path")
        .data(sample_data)
      .enter().append("path")
        .attr("d", path);

    // Add a group element for each dimension.
    const g = svg_adjusted.selectAll(".dimension")
        .data(dimensions)
      .enter().append("g")
        .attr("class", "dimension")
        .attr("transform", function(d) { return "translate(" + x(d) + ")"; });

    // Add an axis and title.
    g.append("g")
        .attr("class", "axis")
        .each(function(d) { d3.select(this).call(axis.scale(y[d])); })
      .append("text")
        .style("text-anchor", "middle")
        .attr("y", -9)
        .text(function(d) { return d; });

    // Add and store a brush for each axis.
    g.append("g")
        .attr("class", "brush")
        .each(function(d) {
            d3.select(this).call(y[d].brush = d3.brushY()
              .extent([[-10,0], [10,height]])
              .on("brush", brush)
              .on("end", brush)
              )
          })
      .selectAll("rect")
        .attr("x", -8)
        .attr("width", 16);

  // Returns the path for a given data point.
  function path(d) {
      return line(dimensions.map(function(p) { return [x(p), y[p](d[p])]; }));
  }

  // Handles a brush event, toggling the display of foreground lines.
  function brush() {
      var actives = [];
      svg.selectAll(".brush")
        .filter(function(d) {
              y[d].brushSelectionValue = d3.brushSelection(this);
              return d3.brushSelection(this);
        })
        .each(function(d) {
            // Get extents of brush along each active selection axis (the Y axes)
              actives.push({
                  dimension: d,
                  extent: d3.brushSelection(this).map(y[d].invert)
              });
        });

      var selected = [];
      // Update foreground to only display selected values
      foreground.style("display", function(d) {
          let isActive = actives.every(function(active) {
              let result = active.extent[1] <= d[active.dimension] && d[active.dimension] <= active.extent[0];
              return result;
          });

          // When no selectors are active, all data should be visible.
          isActive = (actives.length===0)?true:isActive;

          // Only render rows that are active across all selectors
          if(isActive) selected.push(d);
          return (isActive) ? null : "none";
      });

      // Render data as asimple grid
      (actives.length>0)?out.text(d3.tsvFormat(selected)):out.text(d3.tsvFormat(sample_data));
  }
  return svg.node();
}

sample_data = d3v5.csv('https://gist.githubusercontent.com/Jerdak/5d37e36603bd4397ac51fe5032bcfe3e/raw/f07ba5cfb9c5bd6e423c304d2b25ee12620ed233/cars.csv')

d3 = require("https://d3js.org/d3.v4.min.js")

d3v5 = require("https://d3js.org/d3.v5.min.js")
////////////////////////////////////////////////////////////////////////////////
Here is the labeled program:

```javascript
// HTML styles for the program
html`<style>
  // Styling for the SVG element
  svg {
    font: 10px sans-serif;
  }

  // Styling for the background paths
  .background path {
    fill: none;
    stroke: #ddd;
    shape-rendering: crispEdges;
  }

  // Styling for the foreground paths
  .foreground path {
    fill: none;
    stroke: steelblue;
  }

  // Styling for the brush extents
  .brush .extent {
    fill-opacity: .3;
    stroke: #fff;
    shape-rendering: crispEdges;
  }

  // Styling for the axis lines and paths
  .axis line,
  .axis path {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  // Styling for the axis text
  .axis text {
    fill: black;
    text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
  }

  // Styling for the code pre tag
  pre {
    width: 100%;
    height: 300px;
    margin: 6px 12px;
    tab-size: 40;
    font-size: 10px;
    overflow: auto;
  }
</style>`

// Main function to create the parallel coordinates chart
parallel_coordinates = {
    // Define margins and dimensions for the chart
    var margin = { top: 30, right: 10, bottom: 10, left: 10 };
    var width = 960 - margin.left - margin.right;
    var height = 400 - margin.top - margin.bottom;

    // Define scales for the x and y axes
    var x = d3.scalePoint().range([0, width]).padding(1),
        y = {};

    // Define line generator and axis generator
    var line = d3.line(),
        axis = d3.axisLeft();

    // Define variables for background and foreground paths
    var background,
        foreground;

    // Variable to hold the SVG element
    const svg = d3.select(DOM.svg(width + margin.left + margin.right, height + margin.top + margin.bottom));

    // Adjust the SVG element for the margins
    const svg_adjusted = svg.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // Display a portion of the data as text
    var out = d3.select(output)
    out.text(d3.tsvFormat(sample_data.slice(0, 24)));

    // Extract the list of dimensions and create a scale for each
    x.domain(dimensions = d3.keys(sample_data[0]).filter(function(d) {
      return d != "name" && (y[d] = d3.scaleLinear()
          .domain(d3.extent(sample_data, function(p) { return +p[d]; }))
          .range([height, 0]));
    }));

    // Add grey background lines for context
    background = svg_adjusted.append("g")
        .attr("class", "background")
      .selectAll("path")
        .data(sample_data)
      .enter().append("path")
        .attr("d", path);

    // Add blue foreground lines for focus
    foreground = svg_adjusted.append("g")
        .attr("class", "foreground")
      .selectAll("path")
        .data(sample_data)
      .enter().append("path")
        .attr("d", path);

    // Add a group element for each dimension
    const g = svg_adjusted.selectAll(".dimension")
        .data(dimensions)
      .enter().append("g")
        .attr("class", "dimension")
        .attr("transform", function(d) { return "translate(" + x(d) + ")"; });

    // Add an axis and title for each dimension
    g.append("g")
        .attr("class", "axis")
        .each(function(d) { d3.select(this).call(axis.scale(y[d])); })
      .append("text")
        .style("text-anchor", "middle")
        .attr("y", -9)
        .text(function(d) { return d; });

    // Add and store a brush for each axis
    g.append("g")
        .attr("class", "brush")
        .each(function(d) {
            d3.select(this).call(y[d].brush = d3.brushY()
              .extent([[-10, 0], [10, height]])
              .on("brush", brush)
              .on("end", brush)
              )
          })
      .selectAll("rect")
        .attr("x", -8)
        .attr("width", 16);

  // Returns the path for a given data point
  function path(d) {
      return line(dimensions.map(function(p) { return [x(p), y[p](d[p])]; }));
  }

  // Handles a brush event, toggling the display of foreground lines
  function brush() {
      var actives = [];
      svg.selectAll(".brush")
        .filter(function(d) {
              y[d].brushSelectionValue = d3.brushSelection(this);
              return d3.brushSelection(this);
        })
        .each(function(d) {
            // Get extents of brush along each active selection axis (the Y axes)
              actives.push({
                  dimension: d,
                  extent: d3.brushSelection(this).map(y[d].invert)
              });
        });

      var selected = [];
      // Update foreground to only display selected values
      foreground.style("display", function(d) {
          let isActive = actives.every(function(active) {
              let result = active.extent[1] <= d[active.dimension] && d[active.dimension] <= active.extent[0];
              return result;
          });

          // When no selectors are active, all data should be visible
          isActive = (actives.length === 0) ? true : isActive;

          // Only render rows that are active across all selectors
          if (isActive) selected.push(d);
          return (isActive) ? null : "none";
      });

      // Render data as a simple grid
      (actives.length > 0) ? out.text(d3.tsvFormat(selected)) : out.text(d3.tsvFormat(sample_data));
  }
  return svg.node();
}

// Load sample data from a CSV file
sample_data = d3v5.csv('https://gist.githubusercontent.com/Jerdak/5d37e36603bd4397ac51fe5032bcfe3e/raw/f07ba5cfb9c5bd6e423c304d2b25ee12620ed233/cars.csv')

// Import necessary D3.js libraries
d3 = require("https://d3js.org/d3.v4.min.js")
d3v5 = require("https://d3js.org/d3.v5.min.js")
```