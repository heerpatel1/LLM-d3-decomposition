Can you label this program ENTIRELY while preserving its order?:

key = swatches({
  color,
  marginLeft: margin.left,
  columns: "180px"
})

chart = {
  const svg = d3
    .create("svg")
    .attr("viewBox", [-40, 0, width, height])
    .style('background', '#000');

  svg
    .append("g")
    .selectAll("path")
    .data(series)
    .join("path")
    .attr("fill", ({ key }) => color(key))
    .attr("d", area)
    .append("title")
    .text(({ key }) => key);

  svg
    .append("g")
    .call(xAxis)
    .attr("color", "white");

  return svg.node();
}

data = Object.assign(
  d3.csvParse(await FileAttachment("music_values@2.csv").text(), d3.autoType),
  { y: "Value" }
)

series = d3.stack()
    .keys(data.columns.slice(1))
    .offset(d3.stackOffsetWiggle)
    .order(d3.stackOrderInsideOut)
  (data)

area = d3
  .area()
  .x(d => x(d.data.year))
  .y0(d => y(d[0]))
  .y1(d => y(d[1]))

x = d3
  .scaleUtc()
  .domain(d3.extent(data, d => d.year))
  .range([margin.left, width - margin.right])

y = d3.scaleLinear()
    .domain([d3.min(series, d => d3.min(d, d => d[0])), d3.max(series, d => d3.max(d, d => d[1]))])
    .range([height - margin.bottom, margin.top])

color = d3
  .scaleOrdinal()
  .domain(data.columns.slice(1))
  .range([
    "#3d5a80",
    "#6b8ead",
    "#98c1d9",
    "#bcdeeb",
    "#e0fbfc",
    "#e7b4a5",
    "#ee6c4d",
    "#8c4f47",
    "#293241",
    "#3c4552"
  ])

xAxis = g =>
  g
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(
      d3
        .axisBottom(x)
        .ticks(width / 80)
        .tickSizeOuter(0)
        .tickFormat(d3.format(".4"))
    )
    .call(g => g.select(".domain").remove())

height = 550

margin = ({top: 0, right: 20, bottom: 30, left: 20})

d3 = require("d3@5")

import {swatches} from "@d3/color-legend"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

```javascript
// Define color swatches
key = swatches({
  color,
  marginLeft: margin.left,
  columns: "180px"
})

// Define chart function
chart = {
  const svg = d3
    .create("svg")
    .attr("viewBox", [-40, 0, width, height])
    .style('background', '#000');

  // Append paths for each data series
  svg
    .append("g")
    .selectAll("path")
    .data(series)
    .join("path")
    .attr("fill", ({ key }) => color(key))
    .attr("d", area)
    .append("title")
    .text(({ key }) => key);

  // Append x-axis
  svg
    .append("g")
    .call(xAxis)
    .attr("color", "white");

  return svg.node();
}

// Load data and define data properties
data = Object.assign(
  d3.csvParse(await FileAttachment("music_values@2.csv").text(), d3.autoType),
  { y: "Value" }
)

// Stack data series
series = d3.stack()
    .keys(data.columns.slice(1))
    .offset(d3.stackOffsetWiggle)
    .order(d3.stackOrderInsideOut)
  (data)

// Define area function
area = d3
  .area()
  .x(d => x(d.data.year))
  .y0(d => y(d[0]))
  .y1(d => y(d[1]))

// Define x-scale
x = d3
  .scaleUtc()
  .domain(d3.extent(data, d => d.year))
  .range([margin.left, width - margin.right])

// Define y-scale
y = d3.scaleLinear()
    .domain([d3.min(series, d => d3.min(d, d => d[0])), d3.max(series, d => d3.max(d, d => d[1]))])
    .range([height - margin.bottom, margin.top])

// Define color scale
color = d3
  .scaleOrdinal()
  .domain(data.columns.slice(1))
  .range([
    "#3d5a80",
    "#6b8ead",
    "#98c1d9",
    "#bcdeeb",
    "#e0fbfc",
    "#e7b4a5",
    "#ee6c4d",
    "#8c4f47",
    "#293241",
    "#3c4552"
  ])

// Define x-axis function
xAxis = g =>
  g
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(
      d3
        .axisBottom(x)
        .ticks(width / 80)
        .tickSizeOuter(0)
        .tickFormat(d3.format(".4"))
    )
    .call(g => g.select(".domain").remove())

// Define chart height and margin
height = 550

margin = ({top: 0, right: 20, bottom: 30, left: 20})

// Import d3 library
d3 = require("d3@5")

// Import color-legend library and the swatches function
import {swatches} from "@d3/color-legend"
```