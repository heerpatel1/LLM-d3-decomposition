Can you label this program for me without changing its order?:

chart = {
  const svg = d3.select(DOM.svg(w, h))

  const dayLabels = svg.selectAll(".dayLabel")
						          .data(days)
						          .enter().append("text")
						            .text(function (d) { return d; })
						            .attr("x", 0)
						            .attr("y", function (d, i) { return i * gridSize; })
  .attr("font-size", "9pt")
  .attr("fill", "#aaa")
						            .attr("transform", "translate(0," + (margin.left+ gridSize / 1.5)  + ")")
.attr("class", "dayLabel mono axis");

  const timeLabels = svg.selectAll(".timeLabel")
			          .data(hours)
			          .enter().append("text")
			            .text(function(d) { return d; })
			            .attr("x", function(d, i) { return i * gridSize; })
			            .attr("y", 0)
			            .style("text-anchor", "middle")
			            .attr("transform", "translate(" + (80 + gridSize / 2) + ", 12)")
  //.attr("font-size", "9pt")
  //.attr("fill", "#aaa")
 .attr("class", "timeLabel mono axis");

  const cards = svg.selectAll(".hour")
			              .data(data, function(d) {return d.reservation_hour+':'+d.index;});


  const cardsEnter = cards.enter().append("rect")
			              .attr("x", function(d) { return (d.reservation_hour) * gridSize; })
			              .attr("y", function(d) { return (d.index) * gridSize; })
  .attr("transform", "translate(80,20)")
			              .attr("rx", 4)
			              .attr("ry", 4)
			              .attr("class", "hour bordered")
			              .attr("width", gridSize)
			              .attr("height", gridSize)
			              .style("fill", colors[0]);

  cardsEnter.append("title");

   cardsEnter.transition().duration(1000)
			              .style("fill", function(d) { return colorScale(d.revenue); });

			          cardsEnter.select("title").text(function(d) { return d.revenue; });

			          cards.exit().remove();
  return svg.node();
}

style = html`<style>
      rect.bordered {
        stroke: #F7F7F7;
        stroke-width:2px;
      }

      text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
      }

      text.mono2 {
        font-size: 10pt;
        font-family: Consolas, courier;
        fill: #111111;
      }

      text.axis-workweek {
        fill: #000;
      }

      text.axis-worktime {
        fill: #000;
      }
    </style>`

colorScale =  d3.scaleQuantile()
			              .domain([d3.min(data, function (d) { return +d.revenue; }),  d3.max(data, function (d) { return +d.revenue;})])
			              .range(colors)

w = width - margin.left - margin.right

h = (days.length * gridSize) + margin.top + margin.bottom

gridSize = Math.floor(width / 30)

colors = chroma.brewer.Blues

chroma = require('chroma-js')

parseTime = d3.timeParse("%Y-%m-%d %H:%M:%S +0000")

nested_data_days = d3.nest()
       								.key( d => d.reservation_date)
       								.rollup(leaves => leaves.length)
       								.entries(data)

nested_data_hours = d3.nest()
       								.key(d => +d.reservation_hour).sortKeys(d3.ascending)
       								.rollup(leaves => leaves.length)
       								.entries(data)

legendElementWidth = gridSize*2

margin = ({ top: 20, right: 20, bottom:20, left: 20 })

data = d3.csv(`https://gist.githubusercontent.com/mutsimo/2cd8a73f4fef06f6af7ea49604205f43/raw/3317a42a50f72289017a84321f3183ce76754915/data.csv`)

d3 = require("d3@5")

hours = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"]

days = nested_data_days.map(d => format(parseTime(d.key)))

format = d3.timeFormat("%d %b, %a")

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Here's the program with labels added without changing its order:

```javascript
// Chart Component
chart = {
  const svg = d3.select(DOM.svg(w, h))

  // Day Labels
  const dayLabels = svg.selectAll(".dayLabel")
    .data(days)
    .enter().append("text")
    .text(function(d) { return d; })
    .attr("x", 0)
    .attr("y", function(d, i) { return i * gridSize; })
    .attr("font-size", "9pt")
    .attr("fill", "#aaa")
    .attr("transform", "translate(0," + (margin.left + gridSize / 1.5) + ")")
    .attr("class", "dayLabel mono axis");

  // Time Labels
  const timeLabels = svg.selectAll(".timeLabel")
    .data(hours)
    .enter().append("text")
    .text(function(d) { return d; })
    .attr("x", function(d, i) { return i * gridSize; })
    .attr("y", 0)
    .style("text-anchor", "middle")
    .attr("transform", "translate(" + (80 + gridSize / 2) + ", 12)")
    .attr("class", "timeLabel mono axis");

  // Cards
  const cards = svg.selectAll(".hour")
    .data(data, function(d) { return d.reservation_hour + ':' + d.index; });

  const cardsEnter = cards.enter().append("rect")
    .attr("x", function(d) { return (d.reservation_hour) * gridSize; })
    .attr("y", function(d) { return (d.index) * gridSize; })
    .attr("transform", "translate(80,20)")
    .attr("rx", 4)
    .attr("ry", 4)
    .attr("class", "hour bordered")
    .attr("width", gridSize)
    .attr("height", gridSize)
    .style("fill", colors[0]);

  // Title
  cardsEnter.append("title");

  // Fill Transition
  cardsEnter.transition().duration(1000)
    .style("fill", function(d) { return colorScale(d.revenue); });

  // Update Title
  cardsEnter.select("title").text(function(d) { return d.revenue; });

  // Exit
  cards.exit().remove();

  // Return SVG Node
  return svg.node();
}

// Style Component
style = html`<style>
      rect.bordered {
        stroke: #F7F7F7;
        stroke-width:2px;
      }

      text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
      }

      text.mono2 {
        font-size: 10pt;
        font-family: Consolas, courier;
        fill: #111111;
      }

      text.axis-workweek {
        fill: #000;
      }

      text.axis-worktime {
        fill: #000;
      }
    </style>`

// Color Scale
colorScale = d3.scaleQuantile()
  .domain([d3.min(data, function(d) { return +d.revenue; }), d3.max(data, function(d) { return +d.revenue; })])
  .range(colors)

// Width
w = width - margin.left - margin.right

// Height
h = (days.length * gridSize) + margin.top + margin.bottom

// Grid Size
gridSize = Math.floor(width / 30)

// Colors
colors = chroma.brewer.Blues

// Chroma
chroma = require('chroma-js')

// Parse Time
parseTime = d3.timeParse("%Y-%m-%d %H:%M:%S +0000")

// Nested Data by Days
nested_data_days = d3.nest()
  .key(d => d.reservation_date)
  .rollup(leaves => leaves.length)
  .entries(data)

// Nested Data by Hours
nested_data_hours = d3.nest()
  .key(d => +d.reservation_hour).sortKeys(d3.ascending)
  .rollup(leaves => leaves.length)
  .entries(data)

// Legend Element Width
legendElementWidth = gridSize * 2

// Margin
margin = ({ top: 20, right: 20, bottom: 20, left: 20 })

// Data
data = d3.csv(`https://gist.githubusercontent.com/mutsimo/2cd8a73f4fef06f6af7ea49604205f43/raw/3317a42a50f72289017a84321f3183ce76754915/data.csv`)

// D3 Library
d3 = require("d3@5")

// Hours Array
hours = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"]

// Days Array
days = nested_data_days.map(d => format(parseTime(d.key)))

// Time Format
format = d3.timeFormat("%d %b, %a")
```