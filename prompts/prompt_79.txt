Can you label this program for me without changing its ordering?:

viewof edgeColor = Object.assign(html`<select>
  <option value=input>Color by input
  <option value=output>Color by output
  <option value=path selected>Color by input-output
  <option value=none>No color
</select>`, {
  value: new URLSearchParams(html`<a href>`.search).get("color") || "path"
})

viewof align = Object.assign(html`<select>
  <option value=left>Left-aligned
  <option value=right>Right-aligned
  <option value=center>Centered
  <option value=justify selected>Justified
</select>`, {
  value: new URLSearchParams(html`<a href>`.search).get("align") || "justify"
})

chart = {
const svg = d3 . create ( "svg" )
. attr ( "viewBox" , [ 0 , 0 , width , height ] ) ;

const { nodes , links } = sankey ( data ) ;

svg . append ( "g" )
. attr ( "stroke" , "#000" )
. selectAll ( "rect" )
. data ( nodes )
. join ( "rect" )
. attr ( "x" , d => d . x0 )
. attr ( "y" , d => d . y0 )
. attr ( "height" , d => d . y1 - d . y0 )
. attr ( "width" , d => d . x1 - d . x0 )
//      .attr("fill", d => color(d.name))
. append ( "title" )
. text ( d => `${ d . name }\n${ format ( d . value ) }` ) ;

const link = svg . append ( "g" )
. attr ( "fill" , "none" )
. attr ( "stroke-opacity" , 0.5 )
. selectAll ( "g" )
. data ( links )
. join ( "g" )
. style ( "mix-blend-mode" , "multiply" ) ;

if ( edgeColor === "path" ) {
const gradient = link . append ( "linearGradient" )
. attr ( "id" , d => ( d . uid = DOM . uid ( "link" ) ) . id )
. attr ( "gradientUnits" , "userSpaceOnUse" )
. attr ( "x1" , d => d . source . x1 )
. attr ( "x2" , d => d . target . x0 ) ;

gradient . append ( "stop" )
. attr ( "offset" , "0%" )
. attr ( "stop-color" , d => color ( d . source . name ) ) ;

gradient . append ( "stop" )
. attr ( "offset" , "100%" )
. attr ( "stop-color" , d => color ( d . target . name ) ) ;
}

link . append ( "path" )
. attr ( "d" , d3 . sankeyLinkHorizontal ( ) )
. attr ( "stroke" , d => edgeColor === "none" ? "#aaa"
: edgeColor === "path" ? d . uid
: edgeColor === "input" ? color ( d . source . name )
: color ( d . target . name ) )
. attr ( "stroke-width" , d => Math . max ( 1 , d . width ) ) ;

link . append ( "title" )
. text ( d => `${ d . source . name } → ${ d . target . name }\n${ format ( d . value ) }` ) ;

svg . append ( "g" )
. style ( "font" , "10px sans-serif" )
. selectAll ( "text" )
. data ( nodes )
. join ( "text" )
. attr ( "x" , d => d . x0 < width / 2 ? d . x1 + 6 : d . x0 - 6 )
. attr ( "y" , d => ( d . y1 + d . y0 ) / 2 )
. attr ( "dy" , "0.35em" )
. attr ( "text-anchor" , d => d . x0 < width / 2 ? "start" : "end" )
. text ( d => d . name ) ;

return svg . node ( ) ;
}

 sankey = {
const sankey = d3 . sankey ( )
. nodeAlign ( d3 [ `sankey${ align [ 0 ] . toUpperCase ( ) }${ align . slice ( 1 ) }` ] )
. nodeWidth ( 15 )
. nodePadding ( 10 )
. extent ( [ [ 1 , 5 ] , [ width - 1 , height - 5 ] ] ) ;
return ( { nodes , links } ) => sankey ( {
nodes : nodes . map ( d => Object . assign ( { } , d ) ) ,
links : links . map ( d => Object . assign ( { } , d ) )
} ) ;
}

 format = {
const f = d3 . format ( ",.0f" ) ;
return d => `${ f ( d ) } TWh` ;
}

 color = {
const color = d3 . scaleOrdinal ( d3 . schemeCategory10 ) ;
return name => color ( name . replace ( / .*/ , "" ) ) ;
}

 rawData = d3 . json ( "https://query.wikidata.org/sparql?format=json&query=SELECT%20DISTINCT%20%3Fplace1%20%3Fplace1Label%20%3Fplace2%20%3Fplace2Label%20%3Fstart%20%3Fend%0AWHERE%20%7B%0A%20%20BIND(wd%3AQ104764%20AS%20%3Fplace0)%0A%20%20%7B%0A%20%20%20%20%3Fplace0%20wdt%3AP131*%20%3Fplace1%20.%0A%20%20%20%20%3Fplace1%20p%3AP131%20%3Fplace2statement%20.%0A%20%20%20%20%3Fplace2statement%20ps%3AP131%20%3Fplace2%0A%20%20%7D%20UNION%20%7B%0A%20%20%20%20%3Fplace0%20wdt%3AP131*%2Fwdt%3AP17%20%3Fplace1%20.%0A%20%20%20%20%3Fplace1%20p%3A P17%20%3Fplace2statement%20.%0A%20%20%20%20%3Fplace2statement%20ps%3AP17%20%3Fplace2%0A%20%20%7D%0A%20%20OPTIONAL%20%7B%20%3Fplace2statement%20pq%3AP580%20%3Fstart%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20pq%3AP582%20%3Fend%20%7D.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22ru%2Cen%22.%20%7D%0A%7D" )

 data = {
let nodes = [ ]
let nodesQ = [ ]
let links = [ ]

rawData . results . bindings . forEach ( function ( item ) {
const q1 = item . place1 . value . replace ( 'http://www.wikidata.org/entity/' , '' )
const q2 = item . place2 . value . replace ( 'http://www.wikidata.org/entity/' , '' )

if ( q1 === q2 ) {
return ;
}

let q1Index = nodesQ . indexOf ( q1 )
if ( q1Index === - 1 ) {
nodesQ . push ( q1 )
nodes . push ( { name : item . place1Label . value } )
q1Index = nodesQ . length - 1
}

let q2Index = nodesQ . indexOf ( q2 )
if ( q2Index === - 1 ) {
nodesQ . push ( q2 )
nodes . push ( { name : item . place2Label . value } )
q2Index = nodesQ . length - 1
}

const start = item . start !== undefined ? new Date ( item . start . value ) : new Date ( '1000-01-01' )
const end = item . end !== undefined ? new Date ( item . end . value ) : new Date ( )
const size = Math . max ( end - start , 1 )

links . push ( {
source : q1Index ,
target : q2Index ,
value : size
} )
} )

return { nodes , links }
}

 width = 975

 height = 600

 d3 = require ( "d3@5" , "d3-sankey@0.12" )
///////////////////////////////////////////////////////////////////////////////////////
Here's the program labeled without changing its ordering:

```javascript
// Dropdown menu for selecting edge color mode
viewof edgeColor = Object.assign(html`<select>
  <option value=input>Color by input
  <option value=output>Color by output
  <option value=path selected>Color by input-output
  <option value=none>No color
</select>`, {
  value: new URLSearchParams(html`<a href>`.search).get("color") || "path"
})

// Dropdown menu for selecting node alignment mode
viewof align = Object.assign(html`<select>
  <option value=left>Left-aligned
  <option value=right>Right-aligned
  <option value=center>Centered
  <option value=justify selected>Justified
</select>`, {
  value: new URLSearchParams(html`<a href>`.search).get("align") || "justify"
})

// Main function to create the chart
chart = {
  // Create an SVG element with the specified viewBox
  const svg = d3.create("svg")
    .attr("viewBox", [0, 0, width, height]);

  // Calculate nodes and links using the sankey function
  const { nodes, links } = sankey(data);

  // Add rectangles for nodes
  svg.append("g")
    .attr("stroke", "#000")
    .selectAll("rect")
    .data(nodes)
    .join("rect")
    .attr("x", d => d.x0)
    .attr("y", d => d.y0)
    .attr("height", d => d.y1 - d.y0)
    .attr("width", d => d.x1 - d.x0)
    // .attr("fill", d => color(d.name)) // Optional fill color for nodes
    .append("title")
    .text(d => `${d.name}\n${format(d.value)}`);

  // Add paths for links
  const link = svg.append("g")
    .attr("fill", "none")
    .attr("stroke-opacity", 0.5)
    .selectAll("g")
    .data(links)
    .join("g")
    .style("mix-blend-mode", "multiply");

  // Set up gradient for links if edgeColor is set to "path"
  if (edgeColor === "path") {
    const gradient = link.append("linearGradient")
      .attr("id", d => (d.uid = DOM.uid("link")).id)
      .attr("gradientUnits", "userSpaceOnUse")
      .attr("x1", d => d.source.x1)
      .attr("x2", d => d.target.x0);

    gradient.append("stop")
      .attr("offset", "0%")
      .attr("stop-color", d => color(d.source.name));

    gradient.append("stop")
      .attr("offset", "100%")
      .attr("stop-color", d => color(d.target.name));
  }

  // Define link path and color based on edgeColor mode
  link.append("path")
    .attr("d", d3.sankeyLinkHorizontal())
    .attr("stroke", d => edgeColor === "none" ? "#aaa" :
      edgeColor === "path" ? d.uid :
      edgeColor === "input" ? color(d.source.name) :
      color(d.target.name))
    .attr("stroke-width", d => Math.max(1, d.width));

  // Add titles to links
  link.append("title")
    .text(d => `${d.source.name} → ${d.target.name}\n${format(d.value)}`);

  // Add text labels for nodes
  svg.append("g")
    .style("font", "10px sans-serif")
    .selectAll("text")
    .data(nodes)
    .join("text")
    .attr("x", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
    .attr("y", d => (d.y1 + d.y0) / 2)
    .attr("dy", "0.35em")
    .attr("text-anchor", d => d.x0 < width / 2 ? "start" : "end")
    .text(d => d.name);

  // Return the SVG element
  return svg.node();
}

// Sankey layout configuration
sankey = {
  const sankey = d3.sankey()
    .nodeAlign(d3[`sankey${align[0].toUpperCase()}${align.slice(1)}`])
    .nodeWidth(15)
    .nodePadding(10)
    .extent([[1, 5], [width - 1, height - 5]]);
  return ({ nodes, links }) => sankey({
    nodes: nodes.map(d => Object.assign({}, d)),
    links: links.map(d => Object.assign({}, d))
  });
}

// Function to format values
format = {
  const f = d3.format(",.0f");
  return d => `${f(d)} TWh`;
}

// Function to determine colors for nodes based on names
color = {
  const color = d3.scaleOrdinal(d3.schemeCategory10);
  return name => color(name.replace(/ .*/, ""));
}

// Fetch raw data from the provided JSON URL
rawData = d3.json("https://query.wikidata.org/sparql?format=json&query=SELECT%20DISTINCT%20%3Fplace1%20%3Fplace1Label%20%3Fplace2%20%3Fplace2Label%20%3Fstart%20%3Fend%0AWHERE%20%7B%0A%20%20BIND(wd%3AQ104764%20AS%20%3Fplace0)%0A%20%20%7B%0A%20%20%20%20%3Fplace0%20wdt%3AP131*%20%3Fplace1%20.%0A%20%20%20%20%3Fplace1%20p%3AP131%20%3Fplace2statement%20.%0A%20%20%20%20%3Fplace2statement%20ps%3AP131%20%3Fplace2%0A%20%20%7D%20UNION%20%7B%0A%20%20%20%20%3Fplace0%20wdt%3AP131*%2Fwdt%3AP17%20%3Fplace1%20.%0A%20%20%20%20%3Fplace1%20p%3AP17%20%3Fplace2statement%20.%0A%20%20%20%20%3Fplace2statement%20ps%3AP17%20%3Fplace2%0A%20%20%7D%0A%20%20OPTIONAL%20%7B%20%3Fplace2statement%20pq%3AP580%20%3Fstart%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20pq%3AP582%20%3Fend%20%7D.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22ru%2Cen%22.%20%7D%0A%7D")

// Parsing data from the raw JSON data
data = {
  let nodes = [];
  let nodesQ = [];
  let links = [];

  rawData.results.bindings.forEach(function(item) {
    const q1 = item.place1.value.replace('http://www.wikidata.org/entity/', '');
    const q2 = item.place2.value.replace('http://www.wikidata.org/entity/', '');

    if (q1 === q2) {
      return;
    }

    let q1Index = nodesQ.indexOf(q1);
    if (q1Index === -1) {
      nodesQ.push(q1);
      nodes.push({ name: item.place1Label.value });
      q1Index = nodesQ.length - 1;
    }

    let q2Index = nodesQ.indexOf(q2);
    if (q2Index === -1) {
      nodesQ.push(q2);
      nodes.push({ name: item.place2Label.value });
      q2Index = nodesQ.length - 1;
    }

    const start = item.start !== undefined ? new Date(item.start.value) : new Date('1000-01-01');
    const end = item.end !== undefined ? new Date(item.end.value) : new Date();
    const size = Math.max(end - start, 1);

    links.push({
      source: q1Index,
      target: q2Index,
      value: size
    });
  });

  return { nodes, links };
}

// Define chart dimensions
width = 975
height = 600

// Import necessary modules for D3 and Sankey
d3 = require("d3@5", "d3-sankey@0.12")
```