Can you label this program for me?:
chart = {
  const svg = d3.create('svg')
    .style('width', width)
    .style('height', height)
    .on('click', () => focusOn()); // Reset zoom on canvas click

  let gSvg = svg.append("g").attr("transform", "translate(" + radius + "," + radius +")");

  const slice = gSvg.selectAll('g.slice')
  .data(partition(root)
        .descendants()
        // Bring down the size of the white circle
        .map(d => { d.y0 = d.y0 - .2; d.y1 = d.y1 - .2; return d })
        .filter(d => {
            // Don't draw the root node, and for efficiency, filter out nodes that would be too small to see
            return d.depth && d.x1 - d.x0 > 0.001;
        })
      );

  slice.exit().remove();

  const newSlice = slice.enter()
  .append('g').attr('class', 'slice')

  newSlice.append('title')
    .text(d => d.data.data.name + '\n' + formatNumber(d.value) + ' kWh');

  let path = newSlice.append('path')
    .attr('class', 'main-arc')
    .attr("fill", d => { while (d.depth > 1) d = d.parent; return color(d.data.data.name); })
    .attr('d', arc);

  let animateElement = null;

  path.filter(d => d.children)
    .style("cursor", "pointer")
    .on('click', d => {
      d3.event.stopPropagation();
      focusOn(d);
    });

  path.filter(d => d.children)
    .on("mouseover", function(d) {
        animateElement = d3.select(this).append('animate')
          .attr("attributeName", "fill")
          .attr("dur", "1s")
          .attr("values", d => {
          while (d.depth > 1) d = d.parent;
          let colorOfPath = color(d.data.data.name);
          return `${colorOfPath};${darkenColor(colorOfPath, -40)};${colorOfPath};${darkenColor(colorOfPath, 20)};${colorOfPath};`
        })
          .attr("repeatCount", "indefinite")
  })


  path.filter(d => d.children)
    .on("mouseout", function(d) {
    if(animateElement)
      animateElement.remove()
  }
       )

  newSlice.append('path')
    .attr('class', 'hidden-arc')
    .attr('id', (_, i) => `hiddenArc${i}`)
    .attr('d', middleArcLine);

  const text = newSlice.append('text')
  .attr('display', d => textFits(d, 1) ? null : 'none');


  addTopLevelInfo();

  text.append('textPath')
    .attr('startOffset','50%')
    .attr('xlink:href', (_, i) => `#hiddenArc${i}` )
    .text(d => d.data.data.name);

  function focusOn(d = { depth: 0, x0: 0, x1: 1, y0: 0, y1: 1 }) {
    // Reset to top-level if no data point specified
    gSvg.select('g.mainText').remove();

    const transition = svg.transition()
    .duration(750)
    .tween('scale', () => {
      const xd = d3.interpolate(x_scale.domain(), [d.x0, d.x1]),
            yd = d3.interpolate(y_scale.domain(), [d.y0, 1]);
      return t => { x_scale.domain(xd(t)); y_scale.domain(yd(t)); };
    });

    transition.selectAll('path.main-arc')
      .attrTween('d', d => () => arc(d));

    transition.selectAll('path.hidden-arc')
      .attrTween('d', d => () => middleArcLine(d));

    transition.selectAll('text')
      .attrTween('display', des => () => textFits(des, d.depth + 1) ? null : 'none');

    setTimeout(() => {
      if(d.y1 == 1) {
        addTopLevelInfo();
      }
    }, 680)

    moveStackToFront(d);

    function moveStackToFront(elD) {
      svg.selectAll('.slice').filter(d => d === elD)
        .each(function(d) {
        this.parentNode.appendChild(this);
        if (d.parent) { moveStackToFront(d.parent); }
      })
    }
  }


  function addTopLevelInfo() {

    gSvg.select('g.mainText').remove();

    gSvg.append("g")
      .attr('class', 'mainText')
      .selectAll("text")
      .data(root.descendants().filter(d => d.depth == 0))
      .join("text")
      .attr("dy", "0.75em")
      .append('tspan')
      .attr("x", d => x_scale(d.x0) / 2)
      .attr("dy", "0em")
      .text(d => d.data.data.name)
      .append('tspan')
      .attr("x", d => x_scale(d.x0) / 2)
      .attr("dy", "1.35em")
      .text(d => `${formatNumber(d.value)} kWh`)
  }

 return svg.node();
}

html `<style>
        body {
            font-family: Sans-serif;
            font-size: 11px;
        }

        /* .slice {
            cursor: pointer;
        } */

        .slice .main-arc {
            stroke: #fff;
            stroke-width: 1px;
        }

        .slice .hidden-arc {
            fill: none;
        }

        /* .textGroups {
            pointer-events: none;
            text-anchor: middle;
            font-size: 10px;
            font-family: sans-serif;
        } */

        text {
            font-size: 1.1em;
            fill: #fff;
        }

        .mainText {
            pointer-events: none;
            text-anchor: middle;
            font-family: sans-serif;
        }

        .mainText text {
            font-size: 1.6em;
            fill: #444;
            font-family: serif;
        }

        .slice text {
            pointer-events: none;
            dominant-baseline: middle;
            text-anchor: middle;
        }
    </style>`

function darkenColor(color, amount) {
  return '#' + color.replace(/^#/, '').replace(/../g, color => ('0'+Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));
}

textFits = ( d, visibleDepth ) => {

  const CHAR_SPACE = 6;

  const deltaAngle = x_scale(d.x1) - x_scale(d.x0);
  const r = Math.max(0, (y_scale(d.y0) + y_scale(d.y1)) / 2);
  const perimeter = r * deltaAngle;

  return d.depth <= visibleDepth && d.data.data.name.length * CHAR_SPACE < perimeter;
};

middleArcLine = d => {
  const halfPi = Math.PI/2;
  const angles = [x_scale(d.x0) - halfPi, x_scale(d.x1) - halfPi];
  const r = Math.max(0, (y_scale(d.y0) + y_scale(d.y1)) / 2);

  const middleAngle = (angles[1] + angles[0]) / 2;
  const invertDirection = middleAngle > 0 && middleAngle < Math.PI; // On lower quadrants write text ccw
  if (invertDirection) { angles.reverse(); }

  const path = d3.path();
  path.arc(0, 0, r, angles[0], angles[1], invertDirection);
  return path.toString();
};

arc = d3.arc()
  .startAngle(d => x_scale(d.x0))
  .endAngle(d => x_scale(d.x1))
  .padAngle(d => Math.min((x_scale(d.x1 - d.x0)) / 2, 0.001))
  .padRadius(radius / 2)
  .innerRadius(d => Math.max(0, y_scale(d.y0)))
  .outerRadius(d => Math.max(0, y_scale(d.y1)));

partition = d3.partition();

 y_scale = d3.scaleSqrt()
            .range([maxRadius*.1, maxRadius]);

x_scale = d3.scaleLinear()
            .range([0, 2 * Math.PI])
            .clamp(true);

maxRadius = (Math.min(width, height) / 2) - 5;

height = 600

width = 600;

format = d3.format(",d")

radius = width / 2

formatNumber = d3.format(',d');

color = d3.scaleOrdinal(d3.schemeSpectral[root.children.length + 1])

root = d3.hierarchy(d3.stratify()
          .id(function(d) { return d.name; })
          .parentId(function(d) { return d.parent; })
          (data_api)).sum(d => d.descendants().length > 1 ? 0 : d.data.value)

data_api = ([
  { name: 'Site 1', parent: "", value: 7649 },
  { name: 'CCU 1', parent: "Site 1", value: 2951 },
  { name: 'CCU 2', parent: "Site 1", value: 2326 },
  { name: 'CCU 3', parent: "Site 1", value: 2372 },
  { name: 'Zone 11', parent: "CCU 1", value: 956 },
  { name: 'Zone 12', parent: "CCU 1", value: 870 },
  { name: 'Zone 13', parent: "CCU 1", value: 350 },
  { name: 'Zone 14', parent: "CCU 1", value: 400 },
  { name: 'Zone 15', parent: "CCU 1", value: 375 },
  { name: 'Zone 23', parent: "CCU 2", value: 725 },
  { name: 'Zone 24', parent: "CCU 2", value: 745 },
  { name: 'Zone 25', parent: "CCU 2", value: 856 },
  { name: 'Zone 34', parent: "CCU 3", value: 1247 },
  { name: 'Zone 35', parent: "CCU 3", value: 1125 },
  { name: 'Module 111', parent: "Zone 11", value: 56 },
  { name: 'Module 112', parent: "Zone 11", value: 256 },
  { name: 'Module 113', parent: "Zone 11", value: 321 },
  { name: 'Module 114', parent: "Zone 11", value: 218 },
  { name: 'Module 115', parent: "Zone 11", value: 105 }
])

d3 = require("d3@5")
/////////////////////////////////////////////////////////////////////////////////////////////////
Here is the program labeled while preserving its order:

```javascript
// Create the main chart function
chart = {
  // Create an SVG element for the chart and set its size and reset zoom on canvas click
  const svg = d3.create('svg')
    .style('width', width)
    .style('height', height)
    .on('click', () => focusOn()); // Reset zoom on canvas click

  // Create a group element and set its transformation
  let gSvg = svg.append("g").attr("transform", "translate(" + radius + "," + radius +")");

  // Create slice elements using data and set properties
  const slice = gSvg.selectAll('g.slice')
    .data(partition(root)
          .descendants()
          .map(d => { d.y0 = d.y0 - .2; d.y1 = d.y1 - .2; return d; })
          .filter(d => {
            // Filter out nodes that are too small to see
            return d.depth && d.x1 - d.x0 > 0.001;
          }));

  // Remove exiting slices
  slice.exit().remove();

  // Append slices with a group element and set properties
  const newSlice = slice.enter()
    .append('g').attr('class', 'slice');

  // Add title tooltips to the slices
  newSlice.append('title')
    .text(d => d.data.data.name + '\n' + formatNumber(d.value) + ' kWh');

  // Create path elements for the main arcs and set properties
  let path = newSlice.append('path')
    .attr('class', 'main-arc')
    .attr("fill", d => { while (d.depth > 1) d = d.parent; return color(d.data.data.name); })
    .attr('d', arc);

  // Create animation element for path hover interaction
  let animateElement = null;

  // Add mouseover event to path elements for animation
  path.filter(d => d.children)
    .style("cursor", "pointer")
    .on("mouseover", function(d) {
      animateElement = d3.select(this).append('animate')
        .attr("attributeName", "fill")
        .attr("dur", "1s")
        .attr("values", d => {
          while (d.depth > 1) d = d.parent;
          let colorOfPath = color(d.data.data.name);
          return `${colorOfPath};${darkenColor(colorOfPath, -40)};${colorOfPath};${darkenColor(colorOfPath, 20)};${colorOfPath};`;
        })
        .attr("repeatCount", "indefinite");
    });

  // Add mouseout event to stop the animation
  path.filter(d => d.children)
    .on("mouseout", function(d) {
      if (animateElement) {
        animateElement.remove();
      }
    });

  // Create hidden arc paths and set properties
  newSlice.append('path')
    .attr('class', 'hidden-arc')
    .attr('id', (_, i) => `hiddenArc${i}`)
    .attr('d', middleArcLine);

  // Add text elements for the slices and set properties
  const text = newSlice.append('text')
    .attr('display', d => textFits(d, 1) ? null : 'none');

  // Add top-level information
  addTopLevelInfo();

  // Create text paths for slice labels
  text.append('textPath')
    .attr('startOffset', '50%')
    .attr('xlink:href', (_, i) => `#hiddenArc${i}`)
    .text(d => d.data.data.name);

  // Function to focus on a specific data point
  function focusOn(d = { depth: 0, x0: 0, x1: 1, y0: 0, y1: 1 }) {
    // Reset to top-level if no data point specified
    gSvg.select('g.mainText').remove();

    const transition = svg.transition().duration(750)
      .tween('scale', () => {
        const xd = d3.interpolate(x_scale.domain(), [d.x0, d.x1]);
        const yd = d3.interpolate(y_scale.domain(), [d.y0, 1]);
        return t => { x_scale.domain(xd(t)); y_scale.domain(yd(t)); };
      });

    transition.selectAll('path.main-arc')
      .attrTween('d', d => () => arc(d));

    transition.selectAll('path.hidden-arc')
      .attrTween('d', d => () => middleArcLine(d));

    transition.selectAll('text')
      .attrTween('display', des => () => textFits(des, d.depth + 1) ? null : 'none');

    setTimeout(() => {
      if(d.y1 == 1) {
        addTopLevelInfo();
      }
    }, 680);

    moveStackToFront(d);

    // Function to move stack to front
    function moveStackToFront(elD) {
      svg.selectAll('.slice').filter(d => d === elD)
        .each(function(d) {
          this.parentNode.appendChild(this);
          if (d.parent) {
            moveStackToFront(d.parent);
          }
        });
    }
  }

  // Function to add top-level information
  function addTopLevelInfo() {
    gSvg.select('g.mainText').remove();

    gSvg.append("g")
      .attr('class', 'mainText')
      .selectAll("text")
      .data(root.descendants().filter(d => d.depth == 0))
      .join("text")
      .attr("dy", "0.75em")
      .append('tspan')
      .attr("x", d => x_scale(d.x0) / 2)
      .attr("dy", "0em")
      .text(d => d.data.data.name)
      .append('tspan')
      .attr("x", d => x_scale(d.x0) / 2)
      .attr("dy", "1.35em")
      .text(d => `${formatNumber(d.value)} kWh`);
  }

  return svg.node();
}

// Style definitions
html`<style>
        body {
            font-family: Sans-serif;
            font-size: 11px;
        }

        .slice .main-arc {
            stroke: #fff;
            stroke-width: 1px;
        }

        .slice .hidden-arc {
            fill: none;
        }

        text {
            font-size: 1.1em;
            fill: #fff;
        }

        .mainText {
            pointer-events: none;
            text-anchor: middle;
            font-family: sans-serif;
        }

        .mainText text {
            font-size: 1.6em;
            fill: #444;
            font-family: serif;
        }

        .slice text {
            pointer-events: none;
            dominant-baseline: middle;
            text-anchor: middle;
        }
    </style>`

// Function to darken color for hover animation
function darkenColor(color, amount) {
  return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));
}

// Function to check if text fits
textFits = (d, visibleDepth) => {
  const CHAR_SPACE = 6;
  const deltaAngle = x_scale(d.x1) - x_scale(d.x0);
  const r = Math.max(0, (y_scale(d.y0) + y_scale(d.y1)) / 2);
  const perimeter = r * deltaAngle;

  return d.depth <= visibleDepth && d.data.data.name.length * CHAR_SPACE < perimeter;
};

// Function to create middle arc lines for text paths
middleArcLine = d => {
  const halfPi = Math.PI / 2;
  const angles = [x_scale(d.x0) - halfPi, x_scale(d.x1) - halfPi];
  const r = Math.max(0, (y_scale(d.y0) + y_scale(d.y1)) / 2);

  const middleAngle = (angles[1] + angles[0]) / 2;
  const invertDirection = middleAngle > 0 && middleAngle < Math.PI; // On lower quadrants write text ccw
  if (invertDirection) { angles.reverse(); }

  const path = d3.path();
  path.arc(0, 0, r, angles[0], angles[1], invertDirection);
  return path.toString();
};

// Arc generator for creating arcs
arc = d3.arc()
  .startAngle(d => x_scale(d.x0))
  .endAngle(d => x_scale(d.x1))
  .padAngle(d => Math.min((x_scale(d.x1 - d.x0)) / 2, 0.001))
  .padRadius(radius / 2)
  .innerRadius(d => Math.max(0, y_scale(d.y0)))
  .outerRadius(d => Math.max(0, y_scale(d.y1)));

// Create partition layout
partition = d3.partition();

// Create scale for y-axis
y_scale = d3.scaleSqrt()
  .range([maxRadius * 0.1, maxRadius]);

// Create scale for x-axis
x_scale = d3.scaleLinear()
  .range([0, 2 * Math.PI])
  .clamp(true);

// Set the maximum radius based on chart dimensions
maxRadius = (Math.min(width, height) / 2) - 5;

// Define chart dimensions


height = 600;
width = 600;

// Define number format
format = d3.format(",d");

// Calculate chart radius
radius = width / 2;

// Define number formatting function
formatNumber = d3.format(',d');

// Define color scale using D3 scheme
color = d3.scaleOrdinal(d3.schemeSpectral[root.children.length + 1]);

// Create root node from hierarchy data
root = d3.hierarchy(d3.stratify()
          .id(function(d) { return d.name; })
          .parentId(function(d) { return d.parent; })
          (data_api)).sum(d => d.descendants().length > 1 ? 0 : d.data.value);

// Sample data API
data_api = ([
  { name: 'Site 1', parent: "", value: 7649 },
  { name: 'CCU 1', parent: "Site 1", value: 2951 },
  { name: 'CCU 2', parent: "Site 1", value: 2326 },
  { name: 'CCU 3', parent: "Site 1", value: 2372 },
  { name: 'Zone 11', parent: "CCU 1", value: 956 },
  { name: 'Zone 12', parent: "CCU 1", value: 870 },
  { name: 'Zone 13', parent: "CCU 1", value: 350 },
  { name: 'Zone 14', parent: "CCU 1", value: 400 },
  { name: 'Zone 15', parent: "CCU 1", value: 375 },
  { name: 'Zone 23', parent: "CCU 2", value: 725 },
  { name: 'Zone 24', parent: "CCU 2", value: 745 },
  { name: 'Zone 25', parent: "CCU 2", value: 856 },
  { name: 'Zone 34', parent: "CCU 3", value: 1247 },
  { name: 'Zone 35', parent: "CCU 3", value: 1125 },
  { name: 'Module 111', parent: "Zone 11", value: 56 },
  { name: 'Module 112', parent: "Zone 11", value: 256 },
  { name: 'Module 113', parent: "Zone 11", value: 321 },
  { name: 'Module 114', parent: "Zone 11", value: 218 },
  { name: 'Module 115', parent: "Zone 11", value: 105 }
]);

// Import required D3 modules
d3 = require("d3@5");
```