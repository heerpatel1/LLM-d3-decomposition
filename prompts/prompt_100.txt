Can you label this program for me?:
chart = {
const root = partition ( data ) ;

const svg = d3 . create ( "svg" )
. style ( "max-width" , "100%" )
. style ( "height" , "auto" )
. style ( "font" , "10px sans-serif" )
. style ( "margin" , "5px" ) ;

svg . append ( "g" )
. attr ( "fill-opacity" , 0.6 )
. selectAll ( "path" )
. data ( root . descendants ( ) . filter ( d => d . depth ) )
. enter ( ) . append ( "path" )
. attr ( "fill" , d => d . data . color )
. attr ( "d" , arc )
. append ( "title" )
. text ( d => `${ d . ancestors ( ) . map ( d => d . data . name ) . reverse ( ) . join ( "/" ) }\n${ format ( d . value ) }` ) ;

svg . append ( "g" )
. attr ( "pointer-events" , "none" )
. attr ( "text-anchor" , "middle" )
. selectAll ( "text" )
. data ( root . descendants ( ) . filter ( d => d . depth && ( d . y0 + d . y1 ) / 2 * ( d . x1 - d . x0 ) > 10 ) )
. enter ( ) . append ( "text" )
. attr ( "transform" , function ( d ) {
const x = ( d . x0 + d . x1 ) / 2 * 180 / Math . PI ;
const y = ( d . y0 + d . y1 ) / 2 ;
return `rotate(${ x - 90 }) translate(${ y },0) rotate(${ x < 180 ? 0 : 180 })` ;
} )
. attr ( "font-size" , "2em" )
. attr ( "dy" , "0.35em" )
. text ( d => d . data . name ) ;

yield svg . node ( ) ;

svg . attr ( "viewBox" , autoBox ) ;
}

 function autoBox ( ) {
const { x , y , width , height } = this . getBBox ( ) ;
return [ x , y , width , height ] ;
}

 data = FileAttachment ( "heart-porportion.json" ) . json ( )

 partition = data => d3 . partition ( )
. size ( [ 2 * Math . PI , radius ] )
( d3 . hierarchy ( data )
. sum ( d => d . value )
. sort ( ( a , b ) => b . value - a . value ) )

 // color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1))

 format = d3 . format ( ",d" )

 width = 975

 radius = width / 2

 arc = d3 . arc ( )
. startAngle ( d => d . x0 )
. endAngle ( d => d . x1 )
. padAngle ( d => Math . min ( ( d . x1 - d . x0 ) / 2 , 0.005 ) )
. padRadius ( radius / 2 )
. innerRadius ( d => d . y0 )
. outerRadius ( d => d . y1 - 1 )

 d3 = require ( "d3@5" )
///////////////////////////////////////////////////////////////////////////////////////
Here's the labeled program, preserving the original order:

```javascript
// Function to create the chart
chart = {
  // Partition the data using the `partition` function
  const root = partition(data);

  // Create an SVG element for the chart
  const svg = d3.create("svg")
    .style("max-width", "100%")
    .style("height", "auto")
    .style("font", "10px sans-serif")
    .style("margin", "5px");

  // Append a group element to the SVG and create paths for the chart
  svg.append("g")
    .attr("fill-opacity", 0.6)
    .selectAll("path")
    .data(root.descendants().filter(d => d.depth)) // Filter out the root node
    .enter()
    .append("path")
    .attr("fill", d => d.data.color)
    .attr("d", arc)
    .append("title")
    .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")} \n${format(d.value)}`);

  // Append another group element to the SVG for text labels
  svg.append("g")
    .attr("pointer-events", "none")
    .attr("text-anchor", "middle")
    .selectAll("text")
    .data(root.descendants().filter(d => d.depth && (d.y0 + d.y1) / 2 * (d.x1 - d.x0) > 10)) // Filter out nodes that are too small to label
    .enter()
    .append("text")
    .attr("transform", function(d) {
      const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
      const y = (d.y0 + d.y1) / 2;
      return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
    })
    .attr("font-size", "2em")
    .attr("dy", "0.35em")
    .text(d => d.data.name);

  // Return the SVG element with the view box set
  yield svg.node();

  // Set the view box for the SVG element
  svg.attr("viewBox", autoBox);
}

// Function to calculate the view box for the SVG element
function autoBox() {
  const { x, y, width, height } = this.getBBox();
  return [x, y, width, height];
}

// Load data from a JSON file
data = FileAttachment("heart-porportion.json").json();

// Define the partition function for the data
partition = data => d3.partition()
  .size([2 * Math.PI, radius])
  (d3.hierarchy(data)
    .sum(d => d.value)
    .sort((a, b) => b.value - a.value));

// Define the number format function
format = d3.format(",d");

// Define the chart width
width = 975;

// Calculate the chart radius
radius = width / 2;

// Define the arc generator for the chart
arc = d3.arc()
  .startAngle(d => d.x0)
  .endAngle(d => d.x1)
  .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
  .padRadius(radius / 2)
  .innerRadius(d => d.y0)
  .outerRadius(d => d.y1 - 1);

// Import the D3 library
d3 = require("d3@5");
```