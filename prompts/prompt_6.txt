// https://observablehq.com/@marialuisacp/bar-chart
// Training set

Label: createSvgComponent()
chart = {
const svg = d3 . select ( DOM . svg ( width , height ) )
const g = svg . attr ( 'width' , width + margin . left )
. attr ( 'height' , height + margin . top + margin . bottom )
. append ( 'g' )
. attr ( 'transform' , 'translate(' + margin . left + ',0)' )

Label: svgAppend()
g . append ( 'g' )
. attr ( 'transform' , 'translate(0,' + height + ')' )
. call ( d3 . axisBottom ( x_scale ) )
g . append ( 'g' )
. call ( d3 . axisLeft ( y_scale ) )

Label: svgAppend()
svg . selectAll ( '.bar' )
. data ( data )
. enter ( ) . append ( 'rect' )
. attr ( 'fill' , '#0077C0' )
. attr ( 'x' , ( d , i ) => x_scale ( d . category ) + margin . left * 1.5 )
. attr ( 'y' , ( d ) => y_scale ( d . value ) )
. attr ( 'width' , 50 )
. attr ( 'height' , ( d ) => height - y_scale ( d . value ) )

return svg . node ( )
}

Label: scaleComponent()
 x_scale . domain ( data . map ( ( d ) => d . category ) )

Label: filterData()
 data = [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' ] . map ( ( d ) => ( {
value : d3 . randomUniform ( ) ( ) , category : d } ) )

Label: scaleComponent()
 y_scale = d3 . scaleLinear ( )
. domain ( [ 0 , 1 ] )
. range ( [ height , 0 ] )

Label: scaleComponent()
 x_scale = d3 . scaleBand ( )
. rangeRound ( [ 0 , width - margin . left - margin . right ] )

Label: setHeight()
 height = 350

Label: setMargin()
 margin = ( { top : 50 , right : 50 , bottom : 50 , left : 50 } )

Label: setD3Version()
 d3 = require ( "d3@5" )
