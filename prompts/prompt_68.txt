Can you label this program for me?:

chart = {
  const arcs = chartData;

  const firstArcSection = /(^.+?)L/;

  const adeg = Math.PI/180;

  const svg = d3.select(DOM.svg(width, height))
      .attr("text-anchor", "middle")
      .style("font", "12px sans-serif");

  const g = svg.append("g")
      .attr("transform", `translate(${width / 2},${height / 2})`);

  // Create full slices
  let gFullArcs = g.append("g")
    .classed("g-fullarcs", true);

  gFullArcs.selectAll("path")
    .data(arcs)
    .enter().append("path")
      .attr("fill", "none")
      .attr("stroke", "#333")
      .attr("d", fullArc)
      .each(  function (d, i) {
       var newArc = firstArcSection.exec( d3.select(this).attr("d") )[1],
       newArc = newArc.replace(/,/g , " ");
      // https://www.visualcinnamon.com/2015/09/placing-text-on-arcs.html
      //If the end angle lies beyond a quarter of a circle (90 degrees or pi/2)
      //flip the end and start position
      if (d.endAngle > 90 * adeg && d.endAngle < 300 * adeg) {
          //Everything between the capital M and first capital A
          var startLoc = /M(.*?)A/;
          //Everything between the capital A and 0 0 1
          var middleLoc = /A(.*?)0 0 1/;
          //Everything between the 0 0 1 and the end of the string (denoted by $)
          var endLoc = /0 0 1 (.*?)$/;
          //Flip the direction of the arc by switching the start and end point
          //and using a 0 (instead of 1) sweep flag
          var newStart = endLoc.exec( newArc )[1];
          var newEnd = startLoc.exec( newArc )[1];
          var middleSec = middleLoc.exec( newArc )[1];

          //Build up the new arc notation, set the sweep-flag to 0
          newArc = "M" + newStart + "A" + middleSec + "0 0 0 " + newEnd;
      }//if

		   gFullArcs.append("path")
			    .attr("class", "hiddenArcs")
					.attr("id", "labelArc"+i)
					.attr("d", newArc)
					.style("fill", "none");
     })

  // Create Arcs/slices
  let gArcs = g.append("g")
    .classed("g-arcs", true);

  gArcs.selectAll("path")
    .data(arcs)
    .enter().append("path")
      .attr("fill", d => color(d.data.name))
      .attr("fill-opacity", 0.8)
      .attr("stroke", "none")
      .attr("d", arc)
    .append("title")
      .text(d => `${d.data.name}: ${d.data.value.toLocaleString()}`);

  // Create concentric rings
  let gRings = g.append("g")
    .classed("g-rings", true)
    .selectAll("circle")
      .data(ringCount);

  gRings.enter().append("circle")
    .attr("r", function(d){
      return d * ringRadius;
    })
    .attr("fill", "none")
    .attr("stroke", function(d, i){
      // make last ring black, rest white
      return i == (ringCount.length-1) ? "#222" : "white";
    })
    .attr("stroke-width", 1);


  //Append the label names on the outside
gFullArcs.selectAll(".arcText")
    .data(arcs)
   .enter().append("text")
    .attr("class", "arcText")
    //Move the labels below the arcs for slices with an end angle > than 90 degrees
    .attr("dy", function(d,i) {
        return 3 + ((d.endAngle > 90 * adeg && d.endAngle < 300 * adeg) ? -ringRadius/2 : ringRadius/2);
    })
   .append("textPath")
    .attr("startOffset","50%")
    .style("text-anchor","middle")
    .attr("xlink:href",function(d,i){return "#labelArc"+i;})
    .text(d => `${d.data.name}`);

  const gText = g.append("g")
    .classed("g-text", true);

  const text = gText.selectAll("text")
    .data(arcs)
    .enter().append("text")
      .attr("transform", d => `translate(${arcLabel.centroid(d)})`)
      .attr("dy", "0.35em");

  text.append("tspan")
      .attr("x", 0)
      .attr("y", "-0.7em")
      .style("font-size", "1.5em")
      .style("font-weight", "bold")
      .text(d => d.data.depth+'%');

  text.append("tspan")
      .attr("x", "-2em")
      .attr("y", "0.7em")
      .attr("fill-opacity", 0.7)
      .text(d => d.data.movement);

  text.append("tspan")
      .attr("x", "-0.75em")
      .attr("y", "0.7em")
      .attr("fill-opacity", 0.7)
      .classed('up', d => d.data.indicator > 0)
      .text(d => d.data.indicator > 0 ? '▲' : '▼' );

  text.append("tspan")
      .attr("x", "1.75em")
      .attr("y", "0.7em")
      .attr("fill-opacity", 0.7)
      .text(d => ('vs. ' + d.data.prevYear));

  text.append("tspan")
      .attr("x", 0)
      .attr("y", "1.7em")
      .attr("fill-opacity", 0.7)
      .text(d => 'Benchmark: '+ d.data.benchmark);

  // Progress Arc
  g.append("g")
  .classed("progress-arc", true)
  .selectAll("path")
  .data(progressData)
  .enter().append("path")
  .attr("d", progressArc)
  .attr("fill", function(d, i){
    // Not the first one
    return i > 0 ? "#222": "none";
  })
  .classed("progress-arc-path", function(d, i){
    // Not the first one
    return i > 0;
  });

  return svg.node();
}

ringRadius = Math.round(radius / chartData.length)

ringCount = d3.range(chartData.length+1)

data = [{
  name: "Value Proposition",
  value: 1,
  depth: 61,
  indicator: 1,
  movement: '3%',
  prevYear: '2017',
  benchmark: '24%'
}, {
  name: "Capabilities",
  value: 1,
  depth: 31,
  indicator: 1,
  movement: '3%',
  prevYear: '2017',
  benchmark: '24%'
}, {
  name: "Portfolio",
  value : 1,
  depth: 94,
  indicator: -1,
  movement: '3%',
  prevYear: '2017',
  benchmark: '24%'
}, {
  name: "Leadership",
  value: 1,
  depth: 67,
  indicator: -1,
  movement: '3%',
  prevYear: '2017',
  benchmark: '24%'
}, {
  name: "Impact",
  value: 1,
  depth: 26,
  indicator: 1,
  movement: '3%',
  prevYear: '2017',
  benchmark: '24%'
}]

chartData = pie(data)

progressData = d3.pie().sort(null).value(d => d.value)([{
  name: "noprogress",
  value: 46
}, {
  name: "progress",
  value: 54
}])

color = d3.scaleOrdinal()
    .domain(data.map(d => d.name))
    .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length).reverse())

height = Math.min(width, 500)

totalRings = 7

radius = maxRadius * data.length/totalRings

outerArcRadius = maxRadius * (data.length+1) / totalRings

maxRadius = Math.min(width, height) / 2

fnOuterRadius = function(d){
  console.log(d);
  return radiusScale(d.data.depth);
}

radiusScale = d3.scaleLinear()
.domain([0, 100])
.range([1, radius - 1])

arc = d3.arc()
    .innerRadius(0)
    .outerRadius(fnOuterRadius)

fullArc = d3.arc()
    .innerRadius(0)
    .outerRadius(outerArcRadius)

progressArc = d3.arc()
    .innerRadius(outerArcRadius)
    .outerRadius(maxRadius)

arcLabel = {
  const arcRadius = radius * 0.7;
  return d3.arc().innerRadius(arcRadius).outerRadius(arcRadius);
}

pie = d3.pie()
    .sort(null)
    .value(d => d.value)

d3 = require("d3@5")