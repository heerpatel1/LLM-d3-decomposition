Can you label this for me:
viewof lowerbound = Inputs . range ( [ 0 , 3 ] , { label : "lowerbound" , step : 1 } )

 viewof fontSize = Inputs . range ( [ 10 , 20 ] , { label : "font size" , step : 1 } )

 chart = BubbleChart ( data , {
label : d => [ ... d . id . split ( "." ) . pop ( ) . split ( /(?=[A-Z][a-z])/g ) , d . value . toLocaleString ( "en" ) ] . join ( "\n" ) ,
value : d => d . value ,
// group: d => d.id.split(".")[1],
// title: d => `${d.id}\n${d.value.toLocaleString("en")}`,
title : d => d . id ,
// link: d => `https://github.com/prefuse/Flare/blob/master/flare/src/${d.id.replace(/\./g, "/")}.as`,
width : 1152 ,
fill : fill
} )

 // import {BubbleChart} from "@d3/bubble-chart"

 // Copyright 2021 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/bubble-chart
function BubbleChart ( data , {
name = ( [ x ] ) => x , // alias for label
label = name , // given d in data, returns text to display on the bubble
value = ( [ , y ] ) => y , // given d in data, returns a quantitative size
group , // given d in data, returns a categorical value for color
title , // given d in data, returns text to show on hover
link , // given a node d, its link (if any)
linkTarget = "_blank" , // the target attribute for links, if any
width = 640 , // outer width, in pixels
height = width , // outer height, in pixels
padding = 3 , // padding between circles
margin = 1 , // default margins
marginTop = margin , // top margin, in pixels
marginRight = margin , // right margin, in pixels
marginBottom = margin , // bottom margin, in pixels
marginLeft = margin , // left margin, in pixels
groups , // array of group names (the domain of the color scale)
colors = d3 . schemeTableau10 , // an array of colors (for groups)
fill = "#ccc" , // a static fill color, if no group channel is specified
fillOpacity = 0.7 , // the fill opacity of the bubbles
stroke , // a static stroke around the bubbles
strokeWidth , // the stroke width around the bubbles, if any
strokeOpacity , // the stroke opacity around the bubbles, if any
} = { } ) {
// Compute the values.
const D = d3 . map ( data , d => d ) ;
const V = d3 . map ( data , value ) ;
const G = group == null ? null : d3 . map ( data , group ) ;
const I = d3 . range ( V . length ) . filter ( i => V [ i ] > 0 ) ;

// Unique the groups.
if ( G && groups === undefined ) groups = I . map ( i => G [ i ] ) ;
groups = G && new d3 . InternSet ( groups ) ;


































































 import { howto } from "@d3/example-components"

 import { Swatches } from "@d3/color-legend"

 // onegram_data = FileAttachment("final-lemmatized-trans.json").json()

 // twogram_data = FileAttachment("final-2gram-trans@1.json").json()

 json_data = FileAttachment ( "30_20_all-1-trans.json" ) . json ( )

 // json_data = onegram_data.concat(twogram_data)

 data = json_data . filter ( e => e [ 'value' ] > lowerbound )

 fill = d3 . scaleOrdinal ( d3 . schemeSet3 )


///////////////////////////////////////////////////////////////////////////////////////
// Label: viewof lowerbound
viewof lowerbound = Inputs.range([0, 3], { label: "lowerbound", step: 1 });

// Label: viewof fontSize
viewof fontSize = Inputs.range([10, 20], { label: "font size", step: 1 });

// Label: function call
chart = BubbleChart(data, {
    label: d => [ ...d.id.split(".").pop().split(/(?=[A-Z][a-z])/g), d.value.toLocaleString("en")].join("\n"),
    value: d => d.value,
    title: d => d.id,
    width: 1152,
    fill: fill
});

// Label: import BubbleChart
// import {BubbleChart} from "@d3/bubble-chart"

// Copyright 2021 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/bubble-chart
// Label: bubble chart function
function BubbleChart(data, {
    name = ([x]) => x, // alias for label
    label = name, // given d in data, returns text to display on the bubble
    value = ([, y]) => y, // given d in data, returns a quantitative size
    group, // given d in data, returns a categorical value for color
    title, // given d in data, returns text to show on hover
    link, // given a node d, its link (if any)
    linkTarget = "_blank", // the target attribute for links, if any
    width = 640, // outer width, in pixels
    height = width, // outer height, in pixels
    padding = 3, // padding between circles
    margin = 1, // default margins
    marginTop = margin, // top margin, in pixels
    marginRight = margin, // right margin, in pixels
    marginBottom = margin, // bottom margin, in pixels
    marginLeft = margin, // left margin, in pixels
    groups, // array of group names (the domain of the color scale)
    colors = d3.schemeTableau10, // an array of colors (for groups)
    fill = "#ccc", // a static fill color, if no group channel is specified
    fillOpacity = 0.7, // the fill opacity of the bubbles
    stroke, // a static stroke around the bubbles
    strokeWidth, // the stroke width around the bubbles, if any
    strokeOpacity, // the stroke opacity around the bubbles, if any
} = {}) {
    // Label: compute values
    const D = d3.map(data, d => d);
    const V = d3.map(data, value);
    const G = group == null ? null : d3.map(data, group);
    const I = d3.range(V.length).filter(i => V[i] > 0);

    // Unique the groups.
    if (G && groups === undefined) groups = I.map(i => G[i]);
    groups = G && new d3.InternSet(groups);
    // ...
}

// Import components
// Label: import statements
import { howto } from "@d3/example-components";
import { Swatches } from "@d3/color-legend";

// Label: data()
json_data = FileAttachment("30_20_all-1-trans.json").json();

// Filter data
// Label: filter data
data = json_data.filter(e => e['value'] > lowerbound);

// Label: fill scale
fill = d3.scaleOrdinal(d3.schemeSet3);
